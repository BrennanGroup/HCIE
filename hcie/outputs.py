"""
Contains functionality for handling outputs of HCIE searches.
"""

import os
from datetime import datetime

from rdkit import Chem
from rdkit.Chem import Draw, AllChem


def new_directory(func):
    def wrapper(*args, **kwargs):
        # Save the current working directory
        current_dir = os.getcwd()

        if "query_name" in kwargs:
            new_dir = f'{kwargs["query_name"]}_hcie_results'
        else:
            new_dir = "hcie_results"

        try:
            # Create the new directory if it doesn't exist
            os.makedirs(new_dir, exist_ok=True)

            # Change the working directory to the new directory
            os.chdir(new_dir)

            # Call the wrapped function
            result = func(*args, **kwargs)
            return result
        finally:
            # Change back to the previous directory after the function finishes
            os.chdir(current_dir)

    return wrapper


@new_directory
def print_results(results: list, query_smiles: str, query_name: str) -> None:
    """
    Prints out the results of a search against the VEHICLe database.
    :param results:
    :param query_smiles:
    :param query_name:
    :return:
    """
    current_datetime = datetime.now()
    with open(f"{query_name}_results.txt", "w") as output_file:
        # Write the title line
        output_file.write(
            f'Generated by HCIE at {current_datetime.strftime("%H:%M, %d/%m/%Y")}'
            + "\n"
        )
        # Write the query file out
        output_file.write(f"Query molecule: {query_name}" + "\n")
        output_file.write(f"Query SMILES: {query_smiles}" + "\n")

        output_headers = [
            "Rank",
            "RegID",
            "SMILES",
            "Score",
            "ESP Score",
            "Shape Score",
            "Conformer ID",
        ]

        output_file.write(
            "-" * 120
            + "\n"
            + f"{output_headers[0]:10}\t"
            + f"{output_headers[1]:6}\t"
            + f"{output_headers[2]:35}\t"
            + f"{output_headers[3]:3}\t"
            + f"{output_headers[4]:3}\t"
            + f"{output_headers[5]:3}\t"
            + f"{output_headers[6]}"
            + "\n"
            + "-" * 120
            + "\n"
        )
        for rank, result in enumerate(results):
            regid, score, conf_id, esp_score, shape_score, smiles = (
                str(result[0]),
                float(result[1]),
                int(result[4]),
                float(result[3]),
                float(result[2]),
                result[-1],
            )

            # RDKit insists on putting dummy atoms in SMILES that aren't recognised by ChemDraw, so these need replacing
            smiles = smiles.replace("[*:1]", "[R1]").replace("[*:2]", "[R2]")

            row_line = (
                f"{rank:<10}\t"
                + f"{regid:6}\t"
                + f"{smiles:35}\t"
                + f"{score:<5.2f}\t"
                + f"{esp_score:<9.2f}\t"
                + f"{shape_score:<11.2f}\t"
                + f"{conf_id}"
            )
            output_file.write(row_line + "\n")

    return None


@new_directory
def alignments_to_sdf(
    results: list, mol_alignments: dict, query_name: str, num_of_mols: int = 50
) -> None:
    """

    :param results:
    :param mol_alignments:
    :param query_name:
    :param num_of_mols:
    :return:
    """
    filename = f"{query_name}_aligned_results.sdf"

    with Chem.SDWriter(filename) as writer:
        # Write out the query molecule
        query = mol_alignments["query"]
        query.mol.SetProp("_Name", "Query")
        writer.write(query.mol)

        # Write the aligned result mols to the SD file
        for result in results[:num_of_mols]:
            mol = mol_alignments[result[0]]
            mol.mol.SetProp("_Name", f"{result[0]}")
            mol.mol.SetProp("total_score", f"{result[1]}")
            mol.mol.SetProp("ESP_score", f"{result[3]}")
            mol.mol.SetProp("shape_score", f"{result[2]}")
            writer.write(mol.mol, confId=int(result[4]))

    return None


@new_directory
def mols_to_image(results: list, query_name: str, num_of_mols: int = 50):
    """

    :param results:
    :param query_name:
    :param num_of_mols:
    :return:
    """
    mols_to_draw = [Chem.MolFromSmiles(result[-1]) for result in results[:num_of_mols]]
    keys = [
        f"{result[0]}\n\nTotal Score: {result[1]:.2f}"
        for result in results[:num_of_mols]
    ]
    img = Draw.MolsToGridImage(
        mols_to_draw, subImgSize=(300, 250), molsPerRow=5, legends=keys, returnPNG=False
    )
    img.save(f"{query_name}_results.png")

    return None
