"""
Contains functionality for searching a molecule against VEHICLe by various implemented methods
"""

from hcie.molecule import Molecule
from hcie.optimise import optimise_geometry
from hcie.mol2s import Mol2
from hcie.shaep import Shaep

import os
import json
import numpy as np
import pkg_resources

# Set path to package data files referenced within code
vehicle_smiles_dict = pkg_resources.resource_filename('hcie', 'Data/vehicle_smiles.json')
vehicle_sa_scores_dict = pkg_resources.resource_filename('hcie', 'Data/vehicle_sa_scores.json')

# Load package data json files into dictionaries
with open(vehicle_smiles_dict, 'r') as file:
    vehicle_smiles = json.load(file)
with open(vehicle_sa_scores_dict, 'r') as file:
    vehicle_sa_scores = json.load(file)


class Query(Molecule):

    def __init__(self,
                 smiles: str,
                 name: str = 'query'):
        super().__init__(smiles, name)

    @staticmethod
    def make_autode_directory():
        """
        Creates the directory for storing the geometry optimisation results
        :return: None
        """
        os.mkdir('autodE_outputs')
        return None

    @staticmethod
    def make_mol2_directory():
        """
        Creates the directory for storing the mol2 files
        :return: None
        """
        os.mkdir('Mol2')
        return None

    def optimise(self):
        """
        Optimises the geometry of the molecule and calculates partial charges
        :return: None
        """
        self.make_autode_directory()
        os.chdir('autodE_outputs')
        optimise_geometry(self.smiles, self.name)
        os.chdir('..')

        return None

    def create_mol2(self):
        """
        Creates mol2 file for query molecule
        :return: None
        """
        self.make_mol2_directory()
        os.chdir('Mol2')
        query_mol = Mol2(smiles=self.smiles, name=self.name)
        query_mol.print_mol2_file()
        os.chdir('..')

        return None

    @staticmethod
    def make_shaep_directory():
        """
        Creates directory for storing ShaEP outputs
        :return: None
        """
        os.mkdir('ShaEP')
        return None

    def search_shaep(self):
        """
        Performs a ShaEP search on the VEHICLe database for the query molecule
        :return: None
        """
        self.make_shaep_directory()
        os.chdir('ShaEP')
        mol = Shaep(smiles=self.smiles, name=self.name)
        mol.shaep_search()

    def shaep(self):
        """
        Performs all the operations necessary to do a ShaEP search of VEHICLe on
        the instance of the query molecule.
        :return:
        """
        self.optimise()
        self.create_mol2()
        self.search_shaep()
        self.write_output_file()

        return None

    def write_output_file(self):
        """
        Reads in the output.txt file generated by ShaEP and produces a csv file of REGId, SMILES string,
        similarity scores, and synthetic accessibility score.
        :return:
        """

        similarities = self.read_similarity_file()
        smiles = self.get_vehicle_smiles(similarities)
        sa_scores = self.get_sa_scores(similarities)

        self.print_output_to_csv(similarities, smiles, sa_scores)
        os.chdir('..')

        return None

    @staticmethod
    def read_similarity_file(filename='similarity.txt'):
        """
        Loads the data from the similarity.txt output file into a numpy array. Selects columns
        'molecule', 'best_similarity', 'shape_similarity', 'ESP_similarity', and 'avg_similarity'
        :param filename: filename of file to read in - defaults to similarity.txt
        :return: numpy array of data, indexed by molecule ID.
        """
        data = np.genfromtxt(fname=filename, dtype=None, comments=None,
                             usecols=(0, 1, 2, 3, 4), names=True, encoding=None)

        return data

    @staticmethod
    def get_vehicle_smiles(data):
        """
        returns the smiles string for each molecule entry in data as a list.
        :param data: np array of molecules and associated data, must have a field 'molecule' with regids
        :return: list of SMILES strings
        """
        smiles = [vehicle_smiles[molecule] for molecule in data['molecule']]

        return smiles

    @staticmethod
    def get_sa_scores(data):
        """
        returns the sa score for each molecule entry in data as a list
        :param data: np array of molecules and associated data, must have a field 'molecule' with regids
        :return: list of SA scores
        """
        sa_scores = [vehicle_sa_scores[molecule] for molecule in data['molecule']]

        return sa_scores

    def print_output_to_csv(self, data, smiles_list, sa_scores):
        """
        prints out shaep scoring data, smiles string, and SA score to a csv file
        :param data: shaep output data as np array
        :param smiles_list: listlike - smiles scores of molecules
        :param sa_scores: listlike - SA scores of molecules
        :return: printed csv file
        """

        with open(f'{self.name}_outputs.csv', 'w') as csv_file:
            print('RegID, SMILES, best_similarity, shape_similarity, ESP_similarity, avg_similarity,'
                  'SA_score', file=csv_file)

            for idx, _ in enumerate(data['molecule']):
                smiles = smiles_list[idx]
                sa_score = sa_scores[idx]
                regid = data[idx]['molecule']
                best_similarity = data[idx]['best_similarity']
                shape_similarity = data[idx]['shape_similarity']
                esp_similarity = data[idx]['ESP_similarity']
                avg_similarity = data[idx]['avg_similarity']

                print(f'{regid}, {smiles}, {best_similarity:.3f}, {shape_similarity:.3f}, '
                      f'{esp_similarity:.3f}, {avg_similarity:.3f}, {sa_score:.1f}', file=csv_file)

        return None
